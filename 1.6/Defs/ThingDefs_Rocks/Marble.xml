<?xml version="1.0" encoding="UTF-8"?>
<Defs>
  
  <ThingDef Name="WeatheredMarble" ParentName="WeatheredRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
    <defName>WeatheredMarble</defName>
    <label>Weathered Marble</label>
    <description>An impassable mass of weathered marble, a metamorphic rock of metled and recrystallized limestone. Its consistency and softness make it an attractive building material.</description>
    <graphicData>
      <texPath>Things/Rock/WeatheredMarble</texPath>
      <color>(132,135,132)</color>
    </graphicData>
    <randomColorsOne>
      <li>(125,130,125)</li>
    </randomColorsOne>
    <randomColorsTwo>
      <li>(220,220,220)</li>
    </randomColorsTwo>
    <uiIconPath>Things/Rock/WeatheredMarble/WeatheredMarbleA</uiIconPath>
    <statBases>
      <MaxHitPoints>1500</MaxHitPoints>
      <Flammability>0</Flammability>
      <Beauty>3</Beauty>
    </statBases>
    <building>
      <mineableThing>ChunkMarble</mineableThing>
      <mineableDropChance>0.3</mineableDropChance>
    </building>
    <!--How far away it can spawn from an existing location-->
    <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
    <spawnRadius>1</spawnRadius>
    <!-- The probability that this mineral type will be spawned at all on a given map -->
    <perMapProbability>1</perMapProbability>
    <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
    <minClusterProbability>0.01</minClusterProbability>
    <maxClusterProbability>0.02</maxClusterProbability>
    <!-- How  many squares each cluster will be -->
    <minClusterSize>1</minClusterSize>
    <maxClusterSize>5</maxClusterSize>
    <!-- The range of starting sizes of individuals in clusters -->
    <initialSizeMin>1</initialSizeMin>
    <initialSizeMax>1</initialSizeMax>
    <!-- How much initial sizes of individuals randomly vary -->
    <initialSizeVariation>.3</initialSizeVariation>
    <!-- The terrains this can appear on. The default is rocky terrains-->
    <allowedTerrains>
      <li>Marble_Rough</li>
		</allowedTerrains>
    <!-- The terrains this must be near to, but not necessarily on -->
    <neededNearbyTerrains>
      <li>Marble_Rough</li>
    </neededNearbyTerrains>
    <!-- how far away it can be from needed nearby terrains-->
    <neededNearbyTerrainRadius>1</neededNearbyTerrainRadius>
    <!-- If true, growth rate and initial size depends on distance from needed terrains -->
    <neededNearbyTerrainSizeEffect>false</neededNearbyTerrainSizeEffect>
    <!-- Other resources it might drop -->
    <randomlyDropResources>
      <li>
        <ResourceDefName>RoughGem</ResourceDefName>
        <DropProbability>0.04</DropProbability>
        <MinMiningSkill>3</MinMiningSkill>
      </li>
      <li>
        <ResourceDefName>CrushedStone</ResourceDefName>
        <DropProbability>2</DropProbability>
        <CountPerDrop>5</CountPerDrop>
        <WasteProduct>true</WasteProduct>
      </li>
      <li>
        <ResourceDefName>Jade</ResourceDefName>
        <DropProbability>0.015</DropProbability>
        <CountPerDrop>15</CountPerDrop>
      </li>
    </randomlyDropResources>
    <!-- Things this mineral replaces when a map is initialized -->
    <ThingsToReplace>
      <li>Marble</li>
    </ThingsToReplace>
    <!-- Tags which determine how some options behave  -->
    <tags>
      <li>rock</li>
      <li>wall</li>
      <li>weathered</li>
    </tags>
    <!-- How easy it is to mine -->
    <mineSpeedFactor>0.9</mineSpeedFactor>
  </ThingDef>
  
  
  <ThingDef Name="SolidMarble" ParentName="SolidRockBase" Class="MineralsFramework.ThingDef_SolidRock">
    <defName>SolidMarble</defName>
    <label>Solid Marble</label>
    <description>A soild wall of marble, a metamorphic rock of metled and recrystallized limestone. Its consistency and softness make it an attractive building material.</description>
    <graphicData>
      <texPath>Things/Rock/SolidMarble</texPath>
      <color>(132,135,132)</color>
    </graphicData>
    <randomColorsOne>
      <li>(125,130,125)</li>
    </randomColorsOne>
    <randomColorsTwo>
      <li>(220,220,220)</li>
    </randomColorsTwo>
    <uiIconPath>Things/Rock/SolidMarble/SolidMarbleA</uiIconPath>
    <statBases>
      <MaxHitPoints>1700</MaxHitPoints>
      <Flammability>0</Flammability>
      <Beauty>2</Beauty>
    </statBases>
    <building>
      <mineableThing>ChunkMarble</mineableThing>
      <mineableDropChance>0.3</mineableDropChance>
    </building>
    <!--How far away it can spawn from an existing location-->
    <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
    <spawnRadius>1</spawnRadius>
    <!-- The probability that this mineral type will be spawned at all on a given map -->
    <perMapProbability>0</perMapProbability>
    <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
    <minClusterProbability>0</minClusterProbability>
    <maxClusterProbability>0</maxClusterProbability>
    <!-- How  many squares each cluster will be -->
    <minClusterSize>1</minClusterSize>
    <maxClusterSize>10</maxClusterSize>
    <!-- The range of starting sizes of individuals in clusters -->
    <initialSizeMin>1</initialSizeMin>
    <initialSizeMax>1</initialSizeMax>
    <!-- How much initial sizes of individuals randomly vary -->
    <initialSizeVariation>.3</initialSizeVariation>
    <!-- The terrains this can appear on. The default is rocky terrains-->
    <allowedTerrains>
      <li>Marble_Rough</li>
		</allowedTerrains>
    <!-- The terrains this must be near to, but not necessarily on -->
    <neededNearbyTerrains>
      <li>Marble_Rough</li>
    </neededNearbyTerrains>
    <!-- how far away it can be from needed nearby terrains-->
    <neededNearbyTerrainRadius>3</neededNearbyTerrainRadius>
    <!-- If true, growth rate and initial size depends on distance from needed terrains -->
    <neededNearbyTerrainSizeEffect>false</neededNearbyTerrainSizeEffect>
    <!-- Other resources it might drop -->
    <randomlyDropResources>
      <li>
        <ResourceDefName>RoughGem</ResourceDefName>
        <DropProbability>0.04</DropProbability>
        <MinMiningSkill>3</MinMiningSkill>
      </li>
      <li>
        <ResourceDefName>CrushedStone</ResourceDefName>
        <DropProbability>2</DropProbability>
        <CountPerDrop>5</CountPerDrop>
        <WasteProduct>true</WasteProduct>
      </li>
      <li>
        <ResourceDefName>MAU_ChunkAlabaster</ResourceDefName>
        <DropProbability>0.015</DropProbability>
        <CountPerDrop>1</CountPerDrop>
        <MinMiningSkill>5</MinMiningSkill>
      </li>
      <li>
        <ResourceDefName>Jade</ResourceDefName>
        <DropProbability>0.02</DropProbability>
        <CountPerDrop>15</CountPerDrop>
      </li>
    </randomlyDropResources>
    <!-- Things this mineral replaces when a map is initialized -->
    <ThingsToReplace>
      <li>Marble</li>
      <li>HewnMarble</li>
    </ThingsToReplace>
    <!-- Tags which determine how some options behave  -->
    <tags>
      <li>rock</li>
      <li>wall</li>
      <li>solid</li>
    </tags>
    <!-- How easy it is to mine -->
    <mineSpeedFactor>0.9</mineSpeedFactor>
  </ThingDef>
  

  <ThingDef Name="HewnMarble" ParentName="HewnRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
    <defName>HewnMarble</defName>
    <label>Hewn Marble</label>
    <description>A wall of hewn marble, a metamorphic rock of metled and recrystallized limestone. Its consistency and softness make it a popular building material.</description>
    <graphicData>
			<texPath>Things/Rock/HewnMarble</texPath>
      <color>(132,135,132)</color>
    </graphicData>
    <randomColorsOne>
      <li>(125,130,125)</li>
    </randomColorsOne>
    <randomColorsTwo>
      <li>(220,220,220)</li>
    </randomColorsTwo>
    <uiIconPath>Things/Rock/HewnMarble/HewnMarbleA</uiIconPath>
    <statBases>
      <MaxHitPoints>1800</MaxHitPoints>
      <Flammability>0</Flammability>
      <Beauty>1</Beauty>
    </statBases>
    <building>
      <mineableThing>ChunkMarble</mineableThing>
      <mineableDropChance>0.3</mineableDropChance>
      <smoothedThing>SmoothedHewnMarble</smoothedThing>
    </building>
    <!--How far away it can spawn from an existing location-->
    <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
    <spawnRadius>1</spawnRadius>
    <!-- The probability that this mineral type will be spawned at all on a given map -->
    <perMapProbability>0</perMapProbability>
    <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
    <minClusterProbability>0</minClusterProbability>
    <maxClusterProbability>0</maxClusterProbability>
    <!-- How  many squares each cluster will be -->
    <minClusterSize>1</minClusterSize>
    <maxClusterSize>10</maxClusterSize>
    <!-- The range of starting sizes of individuals in clusters -->
    <initialSizeMin>1</initialSizeMin>
    <initialSizeMax>1</initialSizeMax>
    <!-- How much initial sizes of individuals randomly vary -->
    <initialSizeVariation>.3</initialSizeVariation>
    <!-- The terrains this can appear on. The default is rocky terrains-->
    <allowedTerrains>
      <li>Marble_Rough</li>
		</allowedTerrains>
    <!-- The terrains this must be near to, but not necessarily on -->
    <neededNearbyTerrains>
      <li>Marble</li>
    </neededNearbyTerrains>
    <!-- how far away it can be from needed nearby terrains-->
    <neededNearbyTerrainRadius>3</neededNearbyTerrainRadius>
    <!-- If true, growth rate and initial size depends on distance from needed terrains -->
    <neededNearbyTerrainSizeEffect>false</neededNearbyTerrainSizeEffect>
    <!-- The maximum number of images that will be printed per square -->
    <maxMeshCount>1</maxMeshCount>
    <!-- The size range -->
    <visualSizeRange>
      <min>1.7</min>
      <max>1.8</max>
    </visualSizeRange>
    <visualClustering>1.0</visualClustering>
    <!-- between 0 and 1. 0 = uniform distribution, 1 = normal distribution -->
    <visualSpread>0.2</visualSpread>
    <!-- 1 = everything appears within cell and can spawn at edge when visualClustering == 0 -->
    <visualSizeVariation>0.2</visualSizeVariation>
    <!-- Other resources it might drop -->
    <randomlyDropResources>
      <li>
        <ResourceDefName>RoughGem</ResourceDefName>
        <DropProbability>0.04</DropProbability>
        <MinMiningSkill>3</MinMiningSkill>
      </li>
      <li>
        <ResourceDefName>CrushedStone</ResourceDefName>
        <DropProbability>2</DropProbability>
        <CountPerDrop>5</CountPerDrop>
        <WasteProduct>true</WasteProduct>
      </li>
      <li>
        <ResourceDefName>MAU_ChunkAlabaster</ResourceDefName>
        <DropProbability>0.02</DropProbability>
        <CountPerDrop>1</CountPerDrop>
        <MinMiningSkill>5</MinMiningSkill>
      </li>
      <li>
        <ResourceDefName>Jade</ResourceDefName>
        <DropProbability>0.025</DropProbability>
        <CountPerDrop>15</CountPerDrop>
      </li>
    </randomlyDropResources>
    <!-- Things this mineral replaces when a map is initialized -->
    <ThingsToReplace>
      <li>Marble</li>
    </ThingsToReplace>
    <!-- Tags which determine how some options behave  -->
    <tags>
      <li>rock</li>
      <li>wall</li>
      <li>hewn</li>
    </tags>
    <!-- How easy it is to mine -->
    <mineSpeedFactor>0.8</mineSpeedFactor>
  </ThingDef>
 
  
  <ThingDef Name="SmoothedHewnMarble" ParentName="HewnRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
    <defName>SmoothedHewnMarble</defName>
    <label>Smoothed marble wall</label>
    <description>A wall of smoothed marble. Its nice to look at.</description>
    <graphicData>
			<texPath>Things/Rock/SmoothedMarble</texPath>
      <color>(132,135,132)</color>
    </graphicData>
    <randomColorsOne>
      <li>(125,130,125)</li>
    </randomColorsOne>
    <randomColorsTwo>
      <li>(220,220,220)</li>
    </randomColorsTwo>
    <uiIconPath>Things/Rock/SmoothedMarble/SmoothedMarbleA</uiIconPath>
    <statBases>
      <MaxHitPoints>1700</MaxHitPoints>
      <Flammability>0</Flammability>
      <Beauty>3</Beauty>
    </statBases>
    <building>
      <mineableThing>ChunkMarble</mineableThing>
      <mineableDropChance>0.3</mineableDropChance>
    </building>
    <!-- Other resources it might drop -->
    <randomlyDropResources>
      <li>
        <ResourceDefName>RoughGem</ResourceDefName>
        <DropProbability>0.04</DropProbability>
        <MinMiningSkill>3</MinMiningSkill>
      </li>
      <li>
        <ResourceDefName>CrushedStone</ResourceDefName>
        <DropProbability>2</DropProbability>
        <CountPerDrop>5</CountPerDrop>
        <WasteProduct>true</WasteProduct>
      </li>
      <li>
        <ResourceDefName>MAU_ChunkAlabaster</ResourceDefName>
        <DropProbability>0.02</DropProbability>
        <CountPerDrop>1</CountPerDrop>
        <MinMiningSkill>5</MinMiningSkill>
      </li>
      <li>
        <ResourceDefName>Jade</ResourceDefName>
        <DropProbability>0.025</DropProbability>
        <CountPerDrop>15</CountPerDrop>
      </li>
    </randomlyDropResources>
    <!-- Tags which determine how some options behave  -->
    <tags>
      <li>rock</li>
      <li>wall</li>
      <li>hewn</li>
    </tags>
    <!-- How easy it is to mine -->
    <mineSpeedFactor>0.8</mineSpeedFactor>
  </ThingDef>

  
  <ThingDef Name="BoulderMarble" ParentName="BoulderRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
    <defName>BoulderMarble</defName>
    <label>Marble Boulder</label>
    <description>Marble boulder. These can be climbed over with some difficulty and provide good cover.</description>
    <graphicData>
      <texPath>Things/Rock/BoulderMarble</texPath>
      <color>(132,135,132)</color>
    </graphicData>
    <randomColorsOne>
      <li>(125,130,125)</li>
    </randomColorsOne>
    <randomColorsTwo>
      <li>(220,220,220)</li>
    </randomColorsTwo>
    <uiIconPath>Things/Rock/BoulderMarble/BoulderMarbleA</uiIconPath>
    <fillPercent>0.6</fillPercent>
    <statBases>
      <MaxHitPoints>1000</MaxHitPoints>
      <Flammability>0</Flammability>
      <Beauty>2</Beauty>
    </statBases>
    <pathCost>100</pathCost>
    <building>
      <mineableThing>ChunkMarble</mineableThing>
      <mineableDropChance>0.6</mineableDropChance>
    </building>
    <!--How far away it can spawn from an existing location-->
    <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
    <spawnRadius>1</spawnRadius>
    <!-- The probability that this mineral type will be spawned at all on a given map -->
    <perMapProbability>1</perMapProbability>
    <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
    <minClusterProbability>0.005</minClusterProbability>
    <maxClusterProbability>0.01</maxClusterProbability>
    <!-- How  many squares each cluster will be -->
    <minClusterSize>1</minClusterSize>
    <maxClusterSize>2</maxClusterSize>
    <!-- The range of starting sizes of individuals in clusters -->
    <initialSizeMin>.7</initialSizeMin>
    <initialSizeMax>.9</initialSizeMax>
    <!-- How much initial sizes of individuals randomly vary -->
    <initialSizeVariation>.2</initialSizeVariation>
    <!-- The terrains this must be near to, but not necessarily on -->
    <neededNearbyTerrains>
      <li>Marble_Rough</li>
      <li>WeatheredMarble</li>
      <li>SolidMarble</li>
      <li>Marble</li>
    </neededNearbyTerrains>
    <!-- how far away it can be from needed nearby terrains-->
    <neededNearbyTerrainRadius>10</neededNearbyTerrainRadius>
    <!-- If true, growth rate and initial size depends on distance from needed terrains -->
    <neededNearbyTerrainSizeEffect>true</neededNearbyTerrainSizeEffect>
    <!-- Controls how extra clusters are added near assocaited ore-->
    <associatedOres>
      <li>Marble_Rough</li>
      <li>WeatheredMarble</li>
      <li>Marble</li>
    </associatedOres>
    <nearAssociatedOreBonus>3</nearAssociatedOreBonus>
    <!-- Roof requirements -->
    <mustBeUnderRoof>false</mustBeUnderRoof>
    <mustBeUnderThickRoof>false</mustBeUnderThickRoof>
    <mustBeUnroofed>false</mustBeUnroofed>
    <!-- The maximum number of images that will be printed per square -->
    <maxMeshCount>1</maxMeshCount>
    <!-- The size range -->
    <visualSizeRange>
      <min>1.1</min>
      <max>1.3</max>
    </visualSizeRange>
    <visualClustering>1.0</visualClustering>
    <!-- between 0 and 1. 0 = uniform distribution, 1 = normal distribution -->
    <visualSpread>0.8</visualSpread>
    <!-- 1 = everything appears within cell and can spawn at edge when visualClustering == 0 -->
    <visualSizeVariation>0.1</visualSizeVariation>
    <!-- Other resources it might drop -->
    <randomlyDropResources>
      <li>
        <ResourceDefName>RoughGem</ResourceDefName>
        <DropProbability>0.03</DropProbability>
        <MinMiningSkill>3</MinMiningSkill>
      </li>
      <li>
        <ResourceDefName>CrushedStone</ResourceDefName>
        <DropProbability>1</DropProbability>
        <CountPerDrop>5</CountPerDrop>
        <WasteProduct>true</WasteProduct>
      </li>
      <li>
        <ResourceDefName>Jade</ResourceDefName>
        <DropProbability>0.01</DropProbability>
        <CountPerDrop>15</CountPerDrop>
      </li>
    </randomlyDropResources>
    
    <!-- Things this mineral replaces when a map is initialized -->
    <ThingsToReplace>
      <li>ChunkMarble</li>
    </ThingsToReplace>

    <!-- Tags which determine how some options behave  -->
    <tags>
      <li>rock</li>
      <li>boulder</li>
      <li>chunk_replacer</li>
    </tags>
    <!-- How easy it is to mine -->
    <mineSpeedFactor>0.9</mineSpeedFactor>
  </ThingDef>
  

  <ThingDef Name="PassableMarble" ParentName="SmallRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
    <defName>PassableMarble</defName>
    <label>Marble rocks</label>
    <description>Marble rocks that are easily walked over and provide little cover.</description>
    <graphicData>
      <texPath>Things/Rock/PassableMarble</texPath>
      <color>(132,135,132)</color>
      <damageData>
        <enabled>false</enabled>
      </damageData>
    </graphicData>
    <randomColorsOne>
      <li>(125,130,125)</li>
    </randomColorsOne>
    <randomColorsTwo>
      <li>(220,220,220)</li>
    </randomColorsTwo>
    <uiIconPath>Things/Rock/PassableMarble/PassableMarbleA</uiIconPath>
    <fillPercent>0.3</fillPercent>
    <statBases>
      <MaxHitPoints>800</MaxHitPoints>
      <Flammability>0</Flammability>
      <Beauty>1</Beauty>
    </statBases>
    <pathCost>20</pathCost>
    <building>
      <mineableThing>ChunkMarble</mineableThing>
      <mineableDropChance>0.3</mineableDropChance>
    </building>
    <!--How far away it can spawn from an existing location-->
    <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
    <spawnRadius>1</spawnRadius>
    <!-- The probability that this mineral type will be spawned at all on a given map -->
    <perMapProbability>1</perMapProbability>
    <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
    <minClusterProbability>0.02</minClusterProbability>
    <maxClusterProbability>0.03</maxClusterProbability>
    <!-- How  many squares each cluster will be -->
    <minClusterSize>1</minClusterSize>
    <maxClusterSize>4</maxClusterSize>
    <!-- The range of starting sizes of individuals in clusters -->
    <initialSizeMin>0.5</initialSizeMin>
    <initialSizeMax>1.0</initialSizeMax>
    <!-- How much initial sizes of individuals randomly vary -->
    <initialSizeVariation>.2</initialSizeVariation>
    <!-- The terrains this must be near to, but not necessarily on -->
    <neededNearbyTerrains>
      <li>BoulderMarble</li>
			<li>Marble_Rough</li>
      <li>WeatheredMarble</li>
      <li>SolidMarble</li>
      <li>Marble</li>
    </neededNearbyTerrains>
    <!-- how far away it can be from needed nearby terrains-->
    <neededNearbyTerrainRadius>4</neededNearbyTerrainRadius>
    <!-- If true, growth rate and initial size depends on distance from needed terrains -->
    <neededNearbyTerrainSizeEffect>true</neededNearbyTerrainSizeEffect>
    <!-- Controls how extra clusters are added near assocaited ore-->
    <associatedOres>
      <li>BoulderMarble</li>
      <li>WeatheredMarble</li>
      <li>Marble</li>
    </associatedOres>
    <nearAssociatedOreBonus>3</nearAssociatedOreBonus>
    <!-- Roof requirements -->
    <mustBeUnderRoof>false</mustBeUnderRoof>
    <mustBeUnderThickRoof>false</mustBeUnderThickRoof>
    <mustBeUnroofed>false</mustBeUnroofed>
    <!-- The maximum number of images that will be printed per square -->
    <maxMeshCount>2</maxMeshCount>
    <!-- The size range -->
    <visualSizeRange>
      <min>0.5</min>
      <max>0.7</max>
    </visualSizeRange>
    <!-- between 0 and 1. 0 = uniform distribution, 1 = normal distribution -->
    <visualClustering>0.3</visualClustering>
    <!-- 1 = everything appears within cell and can spawn at edge when visualClustering == 0 -->
    <visualSpread>1.2</visualSpread>
    <visualSizeVariation>0.3</visualSizeVariation>
    <!-- Other resources it might drop -->
    <randomlyDropResources>
      <li>
        <ResourceDefName>RoughGem</ResourceDefName>
        <DropProbability>0.02</DropProbability>
        <MinMiningSkill>3</MinMiningSkill>
      </li>
      <li>
        <ResourceDefName>CrushedStone</ResourceDefName>
        <DropProbability>1</DropProbability>
        <CountPerDrop>5</CountPerDrop>
        <WasteProduct>true</WasteProduct>
      </li>
      <li>
        <ResourceDefName>Jade</ResourceDefName>
        <DropProbability>0.005</DropProbability>
        <CountPerDrop>15</CountPerDrop>
      </li>
    </randomlyDropResources>
    <!-- How easy it is to mine -->
    <mineSpeedFactor>1.5</mineSpeedFactor>
  </ThingDef>
  
  
</Defs>
