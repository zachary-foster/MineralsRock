<?xml version="1.0" encoding="UTF-8"?>
<Defs>

  <ThingDef Name="WeatheredGlacialIce" ParentName="WeatheredRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
    <defName>WeatheredGlacialIce</defName>
    <label>Weathered glacial ice</label>
    <description>The ragged edge of a glacier. Deep cracks reveal blue ice inside formed from decades old compacted snow.</description>
    <graphicData>
      <texPath>Things/Rock/WeatheredClaystone</texPath>
      <color>(255,255,255)</color>
    </graphicData>
    <!-- If defined, randomly pick colors from this set -->
    <randomColorsOne>
      <li>(255,255,255)</li>
    </randomColorsOne>
    <!-- If defined, randomly pick colors from this set -->
    <randomColorsTwo>
      <li>(230,235,255)</li>
    </randomColorsTwo>
    <!-- If true, then the probability of each color is randomly chosen for each map, so each map has distinctive colors.   -->
    <seedRandomColorByMap>true</seedRandomColorByMap>
    <!-- The size range -->
    <visualSizeRange>
      <min>1.9</min>
      <max>2.2</max>
    </visualSizeRange>
    <uiIconPath>Things/Rock/WeatheredClaystone/WeatheredClaystoneA</uiIconPath>
    <statBases>
      <MaxHitPoints>200</MaxHitPoints>
      <Flammability>0</Flammability>
      <Beauty>4</Beauty>
    </statBases>
    <building>
    </building>
    <!--How far away it can spawn from an existing location-->
    <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
    <spawnRadius>1</spawnRadius>
    <!-- The probability that this mineral type will be spawned at all on a given map -->
    <perMapProbability>1</perMapProbability>
    <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
    <minClusterProbability>0.04</minClusterProbability>
    <maxClusterProbability>0.08</maxClusterProbability>
    <!-- How  many squares each cluster will be -->
    <minClusterSize>1</minClusterSize>
    <maxClusterSize>30</maxClusterSize>
    <!-- The range of starting sizes of individuals in clusters -->
    <initialSizeMin>1</initialSizeMin>
    <initialSizeMax>1</initialSizeMax>
    <!-- How much initial sizes of individuals randomly vary -->
    <initialSizeVariation>.3</initialSizeVariation>
    <!-- The terrains this can appear on. The default is rocky terrains-->
		<allowedTerrains>
			<li>SolidIce_Rough</li>
		</allowedTerrains>
    <!-- The terrains this must be near to, but not necessarily on -->
    <neededNearbyTerrains>
			<li>SolidIce_Rough</li>
      <li>WeatheredGlacialIce</li>
    </neededNearbyTerrains>
    <!-- how far away it can be from needed nearby terrains-->
    <neededNearbyTerrainRadius>2</neededNearbyTerrainRadius>
    <!-- If true, growth rate and initial size depends on distance from needed terrains -->
    <neededNearbyTerrainSizeEffect>false</neededNearbyTerrainSizeEffect>
    <!-- Other resources it might drop -->
    <randomlyDropResources>
    </randomlyDropResources>
    <!-- Things this mineral replaces when a map is initialized -->
    <ThingsToReplace>
      <li>SolidIce</li>
    </ThingsToReplace>
    <!-- Tags which determine how some options behave  -->
    <tags>
      <li>rock</li>
      <li>wall</li>
      <li>weathered</li>
    </tags>
    <!-- How easy it is to mine -->
    <mineSpeedFactor>1.2</mineSpeedFactor>
    <!-- What stage of map generation the thing is spawned during (rocks or ice) -->
    <newMapGenStep>ice</newMapGenStep>
  </ThingDef>
  
  
  <ThingDef Name="SolidGlacialIce" ParentName="SolidRockBase" Class="MineralsRock.ThingDef_SolidRock">
    <defName>SolidGlacialIce</defName>
    <label>Solid glacial ice</label>
    <description>A solid wall of glacial ice with small cracks running through it.</description>
    <graphicData>
      <texPath>Things/Rock/WeatheredLimestone</texPath>
      <color>(255,255,255)</color>
    </graphicData>
    <!-- If defined, randomly pick colors from this set -->
    <randomColorsOne>
      <li>(240,250,255)</li>
    </randomColorsOne>
    <uiIconPath>Things/Rock/WeatheredLimestone/WeatheredLimestoneA</uiIconPath>
    <statBases>
      <MaxHitPoints>300</MaxHitPoints>
      <Flammability>0</Flammability>
      <Beauty>2</Beauty>
    </statBases>
    <building>
      <mineablePreventMeteorite>true</mineablePreventMeteorite>
    </building>
    <!--How far away it can spawn from an existing location-->
    <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
    <spawnRadius>3</spawnRadius>
    <!-- The probability that this mineral type will be spawned at all on a given map -->
    <perMapProbability>0</perMapProbability>
    <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
    <minClusterProbability>0.01</minClusterProbability>
    <maxClusterProbability>0.01</maxClusterProbability>
    <!-- How  many squares each cluster will be -->
    <minClusterSize>1</minClusterSize>
    <maxClusterSize>5</maxClusterSize>
    <!-- The range of starting sizes of individuals in clusters -->
    <initialSizeMin>1</initialSizeMin>
    <initialSizeMax>1</initialSizeMax>
    <!-- How much initial sizes of individuals randomly vary -->
    <initialSizeVariation>.3</initialSizeVariation>
    <!-- The terrains this can appear on. The default is rocky terrains-->
		<allowedTerrains>
			<li>SolidIce_Rough</li>
		</allowedTerrains>
    <!-- The terrains this must be near to, but not necessarily on -->
    <neededNearbyTerrains>
      <li>SolidIce_Rough</li>
    </neededNearbyTerrains>
    <!-- how far away it can be from needed nearby terrains-->
    <neededNearbyTerrainRadius>3</neededNearbyTerrainRadius>
    <!-- If true, growth rate and initial size depends on distance from needed terrains -->
    <neededNearbyTerrainSizeEffect>false</neededNearbyTerrainSizeEffect>
    <!-- Other resources it might drop -->
    <randomlyDropResources>
    </randomlyDropResources>
    <!-- Things this mineral replaces when a map is initialized -->
    <ThingsToReplace>
      <li>WeatheredGlacialIce</li>
      <li>HewnGlacialIce</li>
      <li>SolidIce</li>
    </ThingsToReplace>
    <!-- Tags which determine how some options behave  -->
    <tags>
      <li>rock</li>
      <li>wall</li>
      <li>solid</li>
    </tags>
    <!-- How easy it is to mine -->
    <mineSpeedFactor>1.2</mineSpeedFactor>
    <!-- What stage of map generation the thing is spawned during (rocks or ice) -->
    <newMapGenStep>ice</newMapGenStep>
  </ThingDef>

  
  <ThingDef Name="HewnGlacialIce" ParentName="HewnRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
    <defName>HewnGlacialIce</defName>
    <label>Hewn glacial ice</label>
    <description>A hewn wall of glacial ice.</description>
    <graphicData>
			<texPath>Things/Rock/HewnRockWall</texPath>
      <color>(240,245,255)</color>
    </graphicData>
    <uiIconPath>Things/Rock/HewnRockWall/HewnRockWallA</uiIconPath>
    <statBases>
      <MaxHitPoints>500</MaxHitPoints>
      <Flammability>0</Flammability>
      <Beauty>1</Beauty>
    </statBases>
    <building>
      <smoothedThing>SmoothedHewnGlacialIce</smoothedThing>
    </building>
    <!--How far away it can spawn from an existing location-->
    <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
    <spawnRadius>1</spawnRadius>
    <!-- The probability that this mineral type will be spawned at all on a given map -->
    <perMapProbability>0</perMapProbability>
    <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
    <minClusterProbability>0</minClusterProbability>
    <maxClusterProbability>0</maxClusterProbability>
    <!-- How  many squares each cluster will be -->
    <minClusterSize>1</minClusterSize>
    <maxClusterSize>10</maxClusterSize>
    <!-- The range of starting sizes of individuals in clusters -->
    <initialSizeMin>1</initialSizeMin>
    <initialSizeMax>1</initialSizeMax>
    <!-- How much initial sizes of individuals randomly vary -->
    <initialSizeVariation>.3</initialSizeVariation>
    <!-- The terrains this can appear on. The default is rocky terrains-->
		<allowedTerrains>
			<li>SolidIce_Rough</li>
		</allowedTerrains>
    <!-- The terrains this must be near to, but not necessarily on -->
    <neededNearbyTerrains>
      <li>SolidIce_Rough</li>
    </neededNearbyTerrains>
    <!-- how far away it can be from needed nearby terrains-->
    <neededNearbyTerrainRadius>3</neededNearbyTerrainRadius>
    <!-- If true, growth rate and initial size depends on distance from needed terrains -->
    <neededNearbyTerrainSizeEffect>false</neededNearbyTerrainSizeEffect>
    <!-- The maximum number of images that will be printed per square -->
    <maxMeshCount>1</maxMeshCount>
    <!-- The size range -->
    <visualSizeRange>
      <min>1.7</min>
      <max>1.8</max>
    </visualSizeRange>
    <visualClustering>1.0</visualClustering>
    <!-- between 0 and 1. 0 = uniform distribution, 1 = normal distribution -->
    <visualSpread>0.2</visualSpread>
    <!-- 1 = everything appears within cell and can spawn at edge when visualClustering == 0 -->
    <visualSizeVariation>0.2</visualSizeVariation>
    <!-- Other resources it might drop -->
    <randomlyDropResources>
    </randomlyDropResources>
    <!-- Things this mineral replaces when a map is initialized -->
    <ThingsToReplace>
      <li>WeatheredGlacialIce</li>
      <li>SolidIce</li>
    </ThingsToReplace>
    <!-- Tags which determine how some options behave  -->
    <tags>
      <li>rock</li>
      <li>wall</li>
      <li>hewn</li>
    </tags>
    <!-- How easy it is to mine -->
    <mineSpeedFactor>1.1</mineSpeedFactor>
    <!-- What stage of map generation the thing is spawned during (rocks or ice) -->
    <newMapGenStep>ice</newMapGenStep>
  </ThingDef>
  
  
  <ThingDef Name="SmoothedHewnGlacialIce" ParentName="HewnRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
    <defName>SmoothedHewnGlacialIce</defName>
    <label>Smoothed glacial ice wall</label>
    <description>A smoothed wall of glacial ice.</description>
    <graphicData>
			<texPath>Things/Rock/SmoothedRockWall</texPath>
      <color>(240,245,255)</color>
    </graphicData>
    <uiIconPath>Things/Rock/SmoothedRockWall/SmoothedRockWallA</uiIconPath>
    <statBases>
      <MaxHitPoints>500</MaxHitPoints>
      <Flammability>0</Flammability>
      <Beauty>4</Beauty>
    </statBases>
    <building>
    </building>
    <!-- Other resources it might drop -->
    <randomlyDropResources>
    </randomlyDropResources>
    <!-- Tags which determine how some options behave  -->
    <tags>
      <li>rock</li>
      <li>wall</li>
      <li>hewn</li>
    </tags>
    <!-- How easy it is to mine -->
    <mineSpeedFactor>1.1</mineSpeedFactor>
  </ThingDef>
  
  
  <ThingDef Name="BoulderGlacialIce" ParentName="BoulderRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
    <defName>BoulderGlacialIce</defName>
    <label>GlacialIce outcropping</label>
    <description>A glacial ice outcropping</description>
    <graphicData>
      <texPath>Things/Rock/PassableClaystone</texPath>
      <color>(240,245,255)</color>
    </graphicData>
    <altitudeLayer>Building</altitudeLayer>
    <!-- If defined, randomly pick colors from this set -->
    <randomColorsOne>
      <li>(255,255,255)</li>
    </randomColorsOne>
    <!-- If defined, randomly pick colors from this set -->
    <randomColorsTwo>
      <li>(240,245,255)</li>
    </randomColorsTwo>
    <!-- How much to change the vertical position of the texture. Positive is up -->
    <verticalOffset>0.1</verticalOffset>
    <uiIconPath>Things/Rock/PassableClaystone/PassableClaystoneA</uiIconPath>
    <fillPercent>0.5</fillPercent>
    <statBases>
      <MaxHitPoints>100</MaxHitPoints>
      <Flammability>0</Flammability>
      <Beauty>2</Beauty>
    </statBases>
    <pathCost>100</pathCost>
    <building>
    </building>
    <!--How far away it can spawn from an existing location-->
    <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
    <spawnRadius>1</spawnRadius>
    <!-- The probability that this mineral type will be spawned at all on a given map -->
    <perMapProbability>1</perMapProbability>
    <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
    <minClusterProbability>0.035</minClusterProbability>
    <maxClusterProbability>0.035</maxClusterProbability>
    <!-- How  many squares each cluster will be -->
    <minClusterSize>1</minClusterSize>
    <maxClusterSize>3</maxClusterSize>
    <!-- The range of starting sizes of individuals in clusters -->
    <initialSizeMin>.8</initialSizeMin>
    <initialSizeMax>1.0</initialSizeMax>
    <!-- How much initial sizes of individuals randomly vary -->
    <initialSizeVariation>.2</initialSizeVariation>
    <!-- The terrains this must be near to, but not necessarily on -->
    <neededNearbyTerrains>
			<li>SolidIce_Rough</li>
      <li>WeatheredGlacialIce</li>
      <li>BoulderGlacialIce</li>
      <li>SolidGlacialIce</li>
    </neededNearbyTerrains>
    <!-- how far away it can be from needed nearby terrains-->
    <neededNearbyTerrainRadius>1.5</neededNearbyTerrainRadius>
    <!-- If true, growth rate and initial size depends on distance from needed terrains -->
    <neededNearbyTerrainSizeEffect>true</neededNearbyTerrainSizeEffect>
    <!-- Controls how extra clusters are added near assocaited ore-->
    <associatedOres>
      <li>WeatheredGlacialIce</li>
      <li>SolidGlacialIce</li>
    </associatedOres>
    <nearAssociatedOreBonus>5</nearAssociatedOreBonus>
    <!-- Roof requirements -->
    <mustBeUnderRoof>false</mustBeUnderRoof>
    <mustBeUnderThickRoof>false</mustBeUnderThickRoof>
    <mustBeUnroofed>true</mustBeUnroofed>
    <!-- The maximum number of images that will be printed per square -->
    <maxMeshCount>2</maxMeshCount>
    <!-- The size range -->
    <visualSizeRange>
      <min>0.7</min>
      <max>1.2</max>
    </visualSizeRange>
    <!-- between 0 and 1. 0 = uniform distribution, 1 = normal distribution -->
    <visualClustering>0.4</visualClustering>
    <!-- 1 = everything appears within cell and can spawn at edge when visualClustering == 0 -->
    <visualSpread>1.2</visualSpread>
    <visualSizeVariation>0.25</visualSizeVariation>
    <!-- Other resources it might drop -->
    <randomlyDropResources>
    </randomlyDropResources>
    <!-- Tags which determine how some options behave  -->
    <tags>
      <li>rock</li>
      <li>boulder</li>
    </tags>
    <!-- How easy it is to mine -->
    <mineSpeedFactor>1.2</mineSpeedFactor>
    <!-- What stage of map generation the thing is spawned during (rocks or ice) -->
    <newMapGenStep>ice</newMapGenStep>
  </ThingDef>
  
  
</Defs>
