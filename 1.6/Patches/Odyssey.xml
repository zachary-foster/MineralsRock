<?xml version="1.0" encoding="UTF-8"?>
<Patch>

  <Operation Class="PatchOperationFindMod">
    <mods>
      <li>Odyssey</li>
    </mods>
    <match Class="PatchOperationAdd">
      <xpath>/Defs/BiomeDef[defName="IceSheet"]</xpath>
      <value>
        <extraRockTypes>
          <li>SolidIce</li>
        </extraRockTypes>
      </value>
    </match>
  </Operation>

  <Operation Class="PatchOperationFindMod">
    <mods>
      <li>Odyssey</li>
    </mods>
    <match Class="PatchOperationAdd">
      <xpath>/Defs/BiomeDef[defName="LavaField"]</xpath>
      <value>
        <forceRockTypes>
            <li>MR_BasaltBase</li>
        </forceRockTypes>
        </value>
    </match>
  </Operation>

  <Operation Class="PatchOperationFindMod">
    <mods>
      <li>Odyssey</li>
    </mods>
    <match Class="PatchOperationAdd">
      <xpath>/Defs</xpath>
      <value>

        <ThingDef Name="WeatheredGlacialIce" ParentName="WeatheredRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
          <defName>WeatheredGlacialIce</defName>
          <label>Weathered glacial ice</label>
          <description>The ragged edge of a glacier. Deep cracks reveal blue ice inside formed from decades old compacted snow.</description>
          <graphicData>
            <texPath>Things/Rock/WeatheredClaystone</texPath>
            <color>(255,255,255)</color>
          </graphicData>
          <!-- If defined, randomly pick colors from this set -->
          <randomColorsOne>
            <li>(240,250,255)</li>
          </randomColorsOne>
          <!-- If defined, randomly pick colors from this set -->
          <randomColorsTwo>
            <li>(240,250,255)</li>
          </randomColorsTwo>
          <!-- If true, then the probability of each color is randomly chosen for each map, so each map has distinctive colors.   -->
          <seedRandomColorByMap>true</seedRandomColorByMap>
          <!-- The size range -->
          <visualSizeRange>
            <min>1.9</min>
            <max>2.2</max>
          </visualSizeRange>
          <uiIconPath>Things/Rock/WeatheredClaystone/WeatheredClaystoneA</uiIconPath>
          <statBases>
            <MaxHitPoints>200</MaxHitPoints>
            <Flammability>0</Flammability>
            <Beauty>4</Beauty>
          </statBases>
          <building>
            <mineablePreventMeteorite>true</mineablePreventMeteorite>
            <mineableThing MayRequire="zacharyfoster.mineralsfrozen">MF_ChunkIce</mineableThing>
            <mineableDropChance MayRequire="zacharyfoster.mineralsfrozen">0.5</mineableDropChance>
          </building>
          <filthLeaving>Filth_ChippedIce</filthLeaving>
          <!--How far away it can spawn from an existing location-->
          <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
          <spawnRadius>1</spawnRadius>
          <!-- The probability that this mineral type will be spawned at all on a given map -->
          <perMapProbability>1</perMapProbability>
          <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
          <minClusterProbability>0.04</minClusterProbability>
          <maxClusterProbability>0.08</maxClusterProbability>
          <!-- How  many squares each cluster will be -->
          <minClusterSize>1</minClusterSize>
          <maxClusterSize>30</maxClusterSize>
          <!-- The range of starting sizes of individuals in clusters -->
          <initialSizeMin>1</initialSizeMin>
          <initialSizeMax>1</initialSizeMax>
          <!-- How much initial sizes of individuals randomly vary -->
          <initialSizeVariation>.3</initialSizeVariation>
          <!-- The terrains this can appear on. The default is rocky terrains-->
	      	<allowedTerrains>
	      		<li>SolidIce_Rough</li>
	      	</allowedTerrains>
          <!-- The terrains this must be near to, but not necessarily on -->
          <neededNearbyTerrains>
	      		<li>SolidIce_Rough</li>
            <li>WeatheredGlacialIce</li>
          </neededNearbyTerrains>
          <!-- how far away it can be from needed nearby terrains-->
          <neededNearbyTerrainRadius>2</neededNearbyTerrainRadius>
          <!-- If true, growth rate and initial size depends on distance from needed terrains -->
          <neededNearbyTerrainSizeEffect>false</neededNearbyTerrainSizeEffect>
          <!-- Other resources it might drop -->
          <randomlyDropResources>
          </randomlyDropResources>
          <!-- Things this mineral replaces when a map is initialized -->
          <ThingsToReplace>
            <li>SolidIce</li>
          </ThingsToReplace>
          <!-- Tags which determine how some options behave  -->
          <tags>
            <li>rock</li>
            <li>wall</li>
            <li>weathered</li>
          </tags>
          <!-- How easy it is to mine -->
          <mineSpeedFactor>1.2</mineSpeedFactor>
          <!-- What stage of map generation the thing is spawned during (rocks or ice) -->
          <newMapGenStep>ice</newMapGenStep>
        </ThingDef>
        
        
        <ThingDef Name="SolidGlacialIce" ParentName="SolidRockBase" Class="MineralsRock.ThingDef_SolidRock">
          <defName>SolidGlacialIce</defName>
          <label>Solid glacial ice</label>
          <description>A solid wall of glacial ice with small cracks running through it.</description>
          <graphicData>
            <texPath>Things/Rock/WeatheredLimestone</texPath>
            <color>(230,240,255)</color>
          </graphicData>
          <!-- If defined, randomly pick colors from this set -->
          <randomColorsOne>
            <li>(230,240,255)</li>
          </randomColorsOne>
          <uiIconPath>Things/Rock/WeatheredLimestone/WeatheredLimestoneA</uiIconPath>
          <statBases>
            <MaxHitPoints>300</MaxHitPoints>
            <Flammability>0</Flammability>
            <Beauty>2</Beauty>
          </statBases>
          <building>
            <mineablePreventMeteorite>true</mineablePreventMeteorite>
            <mineableThing MayRequire="zacharyfoster.mineralsfrozen">MF_ChunkIce</mineableThing>
            <mineableDropChance MayRequire="zacharyfoster.mineralsfrozen">0.6</mineableDropChance>
          </building>
          <filthLeaving>Filth_ChippedIce</filthLeaving>
          <!--How far away it can spawn from an existing location-->
          <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
          <spawnRadius>3</spawnRadius>
          <!-- The probability that this mineral type will be spawned at all on a given map -->
          <perMapProbability>0</perMapProbability>
          <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
          <minClusterProbability>0.01</minClusterProbability>
          <maxClusterProbability>0.01</maxClusterProbability>
          <!-- How  many squares each cluster will be -->
          <minClusterSize>1</minClusterSize>
          <maxClusterSize>5</maxClusterSize>
          <!-- The range of starting sizes of individuals in clusters -->
          <initialSizeMin>1</initialSizeMin>
          <initialSizeMax>1</initialSizeMax>
          <!-- How much initial sizes of individuals randomly vary -->
          <initialSizeVariation>.3</initialSizeVariation>
          <!-- The terrains this can appear on. The default is rocky terrains-->
	      	<allowedTerrains>
	      		<li>SolidIce_Rough</li>
	      	</allowedTerrains>
          <!-- The terrains this must be near to, but not necessarily on -->
          <neededNearbyTerrains>
            <li>SolidIce_Rough</li>
          </neededNearbyTerrains>
          <!-- how far away it can be from needed nearby terrains-->
          <neededNearbyTerrainRadius>3</neededNearbyTerrainRadius>
          <!-- If true, growth rate and initial size depends on distance from needed terrains -->
          <neededNearbyTerrainSizeEffect>false</neededNearbyTerrainSizeEffect>
          <!-- Other resources it might drop -->
          <randomlyDropResources>
          </randomlyDropResources>
          <!-- Things this mineral replaces when a map is initialized -->
          <ThingsToReplace>
            <li>WeatheredGlacialIce</li>
            <li>HewnGlacialIce</li>
            <li>SolidIce</li>
          </ThingsToReplace>
          <!-- Tags which determine how some options behave  -->
          <tags>
            <li>rock</li>
            <li>wall</li>
            <li>solid</li>
          </tags>
          <!-- How easy it is to mine -->
          <mineSpeedFactor>1.2</mineSpeedFactor>
          <!-- What stage of map generation the thing is spawned during (rocks or ice) -->
          <newMapGenStep>ice</newMapGenStep>
        </ThingDef>

        
        <ThingDef Name="HewnGlacialIce" ParentName="HewnRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
          <defName>HewnGlacialIce</defName>
          <label>Hewn glacial ice</label>
          <description>A hewn wall of glacial ice.</description>
          <graphicData>
	      		<texPath>Things/Rock/HewnRockWall</texPath>
            <color>(220,235,255)</color>
          </graphicData>
          <uiIconPath>Things/Rock/HewnRockWall/HewnRockWallA</uiIconPath>
          <statBases>
            <MaxHitPoints>500</MaxHitPoints>
            <Flammability>0</Flammability>
            <Beauty>1</Beauty>
          </statBases>
          <building>
            <smoothedThing>SmoothedHewnGlacialIce</smoothedThing>
            <mineableThing MayRequire="zacharyfoster.mineralsfrozen">MF_ChunkIce</mineableThing>
            <mineableDropChance MayRequire="zacharyfoster.mineralsfrozen">0.7</mineableDropChance>
          </building>
          <filthLeaving>Filth_ChippedIce</filthLeaving>
          <!--How far away it can spawn from an existing location-->
          <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
          <spawnRadius>1</spawnRadius>
          <!-- The probability that this mineral type will be spawned at all on a given map -->
          <perMapProbability>0</perMapProbability>
          <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
          <minClusterProbability>0</minClusterProbability>
          <maxClusterProbability>0</maxClusterProbability>
          <!-- How  many squares each cluster will be -->
          <minClusterSize>1</minClusterSize>
          <maxClusterSize>10</maxClusterSize>
          <!-- The range of starting sizes of individuals in clusters -->
          <initialSizeMin>1</initialSizeMin>
          <initialSizeMax>1</initialSizeMax>
          <!-- How much initial sizes of individuals randomly vary -->
          <initialSizeVariation>.3</initialSizeVariation>
          <!-- The terrains this can appear on. The default is rocky terrains-->
	      	<allowedTerrains>
	      		<li>SolidIce_Rough</li>
	      	</allowedTerrains>
          <!-- The terrains this must be near to, but not necessarily on -->
          <neededNearbyTerrains>
            <li>SolidIce_Rough</li>
          </neededNearbyTerrains>
          <!-- how far away it can be from needed nearby terrains-->
          <neededNearbyTerrainRadius>3</neededNearbyTerrainRadius>
          <!-- If true, growth rate and initial size depends on distance from needed terrains -->
          <neededNearbyTerrainSizeEffect>false</neededNearbyTerrainSizeEffect>
          <!-- The maximum number of images that will be printed per square -->
          <maxMeshCount>1</maxMeshCount>
          <!-- The size range -->
          <visualSizeRange>
            <min>1.7</min>
            <max>1.8</max>
          </visualSizeRange>
          <visualClustering>1.0</visualClustering>
          <!-- between 0 and 1. 0 = uniform distribution, 1 = normal distribution -->
          <visualSpread>0.2</visualSpread>
          <!-- 1 = everything appears within cell and can spawn at edge when visualClustering == 0 -->
          <visualSizeVariation>0.2</visualSizeVariation>
          <!-- Other resources it might drop -->
          <randomlyDropResources>
          </randomlyDropResources>
          <!-- Things this mineral replaces when a map is initialized -->
          <ThingsToReplace>
            <li>WeatheredGlacialIce</li>
            <li>SolidIce</li>
          </ThingsToReplace>
          <!-- Tags which determine how some options behave  -->
          <tags>
            <li>rock</li>
            <li>wall</li>
            <li>hewn</li>
          </tags>
          <!-- How easy it is to mine -->
          <mineSpeedFactor>1.1</mineSpeedFactor>
          <!-- What stage of map generation the thing is spawned during (rocks or ice) -->
          <newMapGenStep>ice</newMapGenStep>
        </ThingDef>
        
        
        <ThingDef Name="SmoothedHewnGlacialIce" ParentName="HewnRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
          <defName>SmoothedHewnGlacialIce</defName>
          <label>Smoothed glacial ice wall</label>
          <description>A smoothed wall of glacial ice.</description>
          <graphicData>
	      		<texPath>Things/Rock/SmoothedRockWall</texPath>
            <color>(220,235,255)</color>
          </graphicData>
          <uiIconPath>Things/Rock/SmoothedRockWall/SmoothedRockWallA</uiIconPath>
          <statBases>
            <MaxHitPoints>500</MaxHitPoints>
            <Flammability>0</Flammability>
            <Beauty>4</Beauty>
          </statBases>
          <building>
            <mineableThing MayRequire="zacharyfoster.mineralsfrozen">MF_ChunkIce</mineableThing>
            <mineableDropChance MayRequire="zacharyfoster.mineralsfrozen">0.7</mineableDropChance>
          </building>
          <filthLeaving>Filth_ChippedIce</filthLeaving>
          <!-- Other resources it might drop -->
          <randomlyDropResources>
          </randomlyDropResources>
          <!-- Tags which determine how some options behave  -->
          <tags>
            <li>rock</li>
            <li>wall</li>
            <li>hewn</li>
          </tags>
          <!-- How easy it is to mine -->
          <mineSpeedFactor>1.1</mineSpeedFactor>
        </ThingDef>
        
        
        <ThingDef Name="BoulderGlacialIce" ParentName="BoulderRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
          <defName>BoulderGlacialIce</defName>
          <label>GlacialIce outcropping</label>
          <description>A glacial ice outcropping</description>
          <graphicData>
            <texPath>Things/Rock/PassableClaystone</texPath>
            <color>(240,245,255)</color>
          </graphicData>
          <altitudeLayer>Building</altitudeLayer>
          <!-- If defined, randomly pick colors from this set -->
          <randomColorsOne>
            <li>(240,245,255)</li>
          </randomColorsOne>
          <!-- If defined, randomly pick colors from this set -->
          <randomColorsTwo>
            <li>(240,245,255)</li>
          </randomColorsTwo>
          <!-- How much to change the vertical position of the texture. Positive is up -->
          <verticalOffset>0.1</verticalOffset>
          <uiIconPath>Things/Rock/PassableClaystone/PassableClaystoneA</uiIconPath>
          <fillPercent>0.5</fillPercent>
          <statBases>
            <MaxHitPoints>100</MaxHitPoints>
            <Flammability>0</Flammability>
            <Beauty>2</Beauty>
          </statBases>
          <pathCost>100</pathCost>
          <building>
            <mineableThing MayRequire="zacharyfoster.mineralsfrozen">MF_ChunkIce</mineableThing>
            <mineableDropChance MayRequire="zacharyfoster.mineralsfrozen">0.3</mineableDropChance>
          </building>
          <filthLeaving>Filth_ChippedIce</filthLeaving>
          <!--How far away it can spawn from an existing location-->
          <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
          <spawnRadius>1</spawnRadius>
          <!-- The probability that this mineral type will be spawned at all on a given map -->
          <perMapProbability>1</perMapProbability>
          <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
          <minClusterProbability>0.05</minClusterProbability>
          <maxClusterProbability>0.08</maxClusterProbability>
          <!-- How  many squares each cluster will be -->
          <minClusterSize>1</minClusterSize>
          <maxClusterSize>3</maxClusterSize>
          <!-- The range of starting sizes of individuals in clusters -->
          <initialSizeMin>.8</initialSizeMin>
          <initialSizeMax>1.0</initialSizeMax>
          <!-- How much initial sizes of individuals randomly vary -->
          <initialSizeVariation>.2</initialSizeVariation>
          <!-- The terrains this must be near to, but not necessarily on -->
          <neededNearbyTerrains>
	      		<li>SolidIce_Rough</li>
            <li>WeatheredGlacialIce</li>
            <li>BoulderGlacialIce</li>
            <li>SolidGlacialIce</li>
          </neededNearbyTerrains>
          <!-- how far away it can be from needed nearby terrains-->
          <neededNearbyTerrainRadius>1.5</neededNearbyTerrainRadius>
          <!-- If true, growth rate and initial size depends on distance from needed terrains -->
          <neededNearbyTerrainSizeEffect>true</neededNearbyTerrainSizeEffect>
          <!-- Controls how extra clusters are added near assocaited ore-->
          <associatedOres>
            <li>WeatheredGlacialIce</li>
            <li>SolidGlacialIce</li>
          </associatedOres>
          <nearAssociatedOreBonus>5</nearAssociatedOreBonus>
          <!-- Roof requirements -->
          <mustBeUnderRoof>false</mustBeUnderRoof>
          <mustBeUnderThickRoof>false</mustBeUnderThickRoof>
          <mustBeUnroofed>true</mustBeUnroofed>
          <!-- The maximum number of images that will be printed per square -->
          <maxMeshCount>2</maxMeshCount>
          <!-- The size range -->
          <visualSizeRange>
            <min>0.8</min>
            <max>1.3</max>
          </visualSizeRange>
          <!-- between 0 and 1. 0 = uniform distribution, 1 = normal distribution -->
          <visualClustering>0.3</visualClustering>
          <!-- 1 = everything appears within cell and can spawn at edge when visualClustering == 0 -->
          <visualSpread>1.2</visualSpread>
          <visualSizeVariation>0.25</visualSizeVariation>
          <!-- Other resources it might drop -->
          <randomlyDropResources>
          </randomlyDropResources>
          <!-- Tags which determine how some options behave  -->
          <tags>
            <li>rock</li>
            <li>boulder</li>
          </tags>
          <!-- How easy it is to mine -->
          <mineSpeedFactor>2.0</mineSpeedFactor>
          <!-- What stage of map generation the thing is spawned during (rocks or ice) -->
          <newMapGenStep>ice</newMapGenStep>
          <!-- at what snow depth the mineral is completely hidden -->
          <hiddenInSnowThreshold>1.1</hiddenInSnowThreshold>
        </ThingDef>
        
        
        <ThingDef Name="SmallPassableGlacialIce" ParentName="SmallRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
          <defName>SmallPassableGlacialIce</defName>
          <label>Ice fragments</label>
          <description>Small chunks of ice that have fallen from the roof of an ice cave.</description>
          <graphicData>
            <texPath>Things/Rock/PassableBasalt</texPath>
            <color>(230,240,255)</color>
            <damageData>
              <enabled>false</enabled>
            </damageData>
          </graphicData>
          <uiIconPath>Things/Rock/PassableBasalt/PassableBasaltA</uiIconPath>
          <randomColorsOne>
            <li>(230,240,255)</li>
          </randomColorsOne>
          <randomColorsTwo>
            <li>(230,240,255)</li>
          </randomColorsTwo>
          <fillPercent>0.1</fillPercent>
          <statBases>
            <MaxHitPoints>50</MaxHitPoints>
            <Flammability>0</Flammability>
            <Beauty>0</Beauty>
          </statBases>
          <pathCost>40</pathCost>
          <building>
          </building>
          <filthLeaving>Filth_ChippedIce</filthLeaving>
          <!--How far away it can spawn from an existing location-->
          <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
          <spawnRadius>2</spawnRadius>
          <!-- The probability that this mineral type will be spawned at all on a given map -->
          <perMapProbability>1</perMapProbability>
          <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
          <minClusterProbability>0.04</minClusterProbability>
          <maxClusterProbability>0.06</maxClusterProbability>
          <!-- How  many squares each cluster will be -->
          <minClusterSize>1</minClusterSize>
          <maxClusterSize>4</maxClusterSize>
          <!-- The range of starting sizes of individuals in clusters -->
          <initialSizeMin>.3</initialSizeMin>
          <initialSizeMax>.9</initialSizeMax>
          <!-- How much initial sizes of individuals randomly vary -->
          <initialSizeVariation>.2</initialSizeVariation>
          <!-- The terrains this must be near to, but not necessarily on -->
          <neededNearbyTerrains>
            <li>SolidGlacialIce</li>
          </neededNearbyTerrains>
          <!-- how far away it can be from needed nearby terrains-->
          <neededNearbyTerrainRadius>4</neededNearbyTerrainRadius>
          <!-- If true, growth rate and initial size depends on distance from needed terrains -->
          <neededNearbyTerrainSizeEffect>true</neededNearbyTerrainSizeEffect>
          <!-- Controls how extra clusters are added near assocaited ore-->
          <associatedOres>
            <li>WeatheredGlacialIce</li>
          </associatedOres>
          <nearAssociatedOreBonus>5</nearAssociatedOreBonus>
          <!-- Roof requirements -->
          <mustBeUnderRoof>true</mustBeUnderRoof>
          <mustBeUnderThickRoof>false</mustBeUnderThickRoof>
          <mustBeUnroofed>false</mustBeUnroofed>
          <!-- The maximum number of images that will be printed per square -->
          <maxMeshCount>4</maxMeshCount>
          <!-- The size range -->
          <visualSizeRange>
            <min>0.2</min>
            <max>0.6</max>
          </visualSizeRange>
          <visualClustering>0.4</visualClustering>
          <!-- between 0 and 1. 0 = uniform distribution, 1 = normal distribution -->
          <visualSpread>1.9</visualSpread>
          <!-- 1 = everything appears within cell and can spawn at edge when visualClustering == 0 -->
          <visualSizeVariation>0.4</visualSizeVariation>
          <!-- Other resources it might drop -->
          <randomlyDropResources>
          </randomlyDropResources>
          <!-- How easy it is to mine -->
          <mineSpeedFactor>2.0</mineSpeedFactor>
          <!-- What stage of map generation the thing is spawned during (rocks or ice) -->
          <newMapGenStep>ice</newMapGenStep>
        </ThingDef>



         <ThingDef Name="SolidVacstone" ParentName="SolidRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
           <defName>SolidVacstone</defName>
           <label>Solid Vacstone</label>
           <description>A solid wall of vacstone, a mixture of silicate rich rock and occasional streaks of unoxidized metal.</description>
           <graphicData>
             <texPath>Things/Rock/WeatheredBasalt</texPath>
             <color>(115,106,98)</color>
           </graphicData>
           <uiIconPath>Things/Rock/WeatheredBasalt/WeatheredBasaltA</uiIconPath>
           <statBases>
             <Flammability>0</Flammability>
             <Beauty>-2</Beauty>
             <MaxHitPoints>1700</MaxHitPoints>
           </statBases>
           <building>
             <mineableThing>ChunkVacstone</mineableThing>
             <mineableDropChance>0.4</mineableDropChance>
           </building>
           <!--How far away it can spawn from an existing location-->
           <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
           <spawnRadius>1</spawnRadius>
           <!-- The probability that this mineral type will be spawned at all on a given map -->
           <perMapProbability>1</perMapProbability>
           <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
           <minClusterProbability>1</minClusterProbability>
           <maxClusterProbability>1</maxClusterProbability>
           <!-- How  many squares each cluster will be -->
           <minClusterSize>1</minClusterSize>
           <maxClusterSize>1</maxClusterSize>
           <!-- The range of starting sizes of individuals in clusters -->
           <initialSizeMin>1</initialSizeMin>
           <initialSizeMax>1</initialSizeMax>
           <!-- How much initial sizes of individuals randomly vary -->
           <initialSizeVariation>.3</initialSizeVariation>
           <!-- The terrains this can appear on. The default is rocky terrains-->
           <allowedTerrains>
             <li>Vacstone_Rough</li>
	       	</allowedTerrains>
           <!-- If true, growth rate and initial size depends on distance from needed terrains -->
           <neededNearbyTerrainSizeEffect>false</neededNearbyTerrainSizeEffect>
           <!-- Other resources it might drop -->
           <randomlyDropResources>
             <li>
               <ResourceDefName>RoughGem</ResourceDefName>
               <DropProbability>0.03</DropProbability>
               <MinMiningSkill>6</MinMiningSkill>
             </li>
             <li>
               <ResourceDefName>CrushedStone</ResourceDefName>
               <DropProbability>1</DropProbability>
               <CountPerDrop>5</CountPerDrop>
               <WasteProduct>true</WasteProduct>
             </li>
             <li>
               <ResourceDefName>Steel</ResourceDefName>
               <DropProbability>0.05</DropProbability>
               <CountPerDrop>10</CountPerDrop>
             </li>
           </randomlyDropResources>
           <!-- Things this mineral replaces when a map is initialized -->
           <ThingsToReplace>
             <li>Vacstone</li>
             <li>HewnVacstone</li>
           </ThingsToReplace>
           <replaceAll>false</replaceAll>
           <mustReplace>true</mustReplace>
           <!-- Tags which determine how some options behave  -->
           <tags>
             <li>rock</li>
             <li>wall</li>
             <li>solid</li>
           </tags>
           <!-- How easy it is to mine -->
           <mineSpeedFactor>0.8</mineSpeedFactor>
           <!-- Roof requirements -->
           <mustBeUnderRoof>false</mustBeUnderRoof>
           <mustBeUnderThickRoof>false</mustBeUnderThickRoof>
           <mustBeUnroofed>false</mustBeUnroofed>
           <mustBeNotUnderThickRoof>false</mustBeNotUnderThickRoof>
           <mustBeNearPassable>true</mustBeNearPassable>
           <!-- Order in which minerals are spawned during map generation (lower numbers first) -->
           <newMapSpawnOrder>40</newMapSpawnOrder>
         </ThingDef>
         

         <ThingDef Name="HewnVacstone" ParentName="HewnRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
           <defName>HewnVacstone</defName>
           <label>Hewn Vacstone</label>
           <description>A hewn wall of vacstone.</description>
           <graphicData>
	       		<texPath>Things/Rock/HewnRockWall</texPath>
             <color>(115,106,98)</color>
           </graphicData>
           <uiIconPath>Things/Rock/HewnRockWall/HewnRockWallA</uiIconPath>
           <statBases>
             <MaxHitPoints>1800</MaxHitPoints>
             <Flammability>0</Flammability>
             <Beauty>-2</Beauty>
           </statBases>
           <building>
             <mineableThing>ChunkVacstone</mineableThing>
             <mineableDropChance>0.4</mineableDropChance>
             <smoothedThing>SmoothedHewnVacstone</smoothedThing>
           </building>
           <!--How far away it can spawn from an existing location-->
           <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
           <spawnRadius>1</spawnRadius>
           <!-- The probability that this mineral type will be spawned at all on a given map -->
           <perMapProbability>0</perMapProbability>
           <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
           <minClusterProbability>0</minClusterProbability>
           <maxClusterProbability>0</maxClusterProbability>
           <!-- How  many squares each cluster will be -->
           <minClusterSize>1</minClusterSize>
           <maxClusterSize>1</maxClusterSize>
           <!-- The range of starting sizes of individuals in clusters -->
           <initialSizeMin>1</initialSizeMin>
           <initialSizeMax>1</initialSizeMax>
           <!-- How much initial sizes of individuals randomly vary -->
           <initialSizeVariation>.3</initialSizeVariation>
           <!-- The terrains this can appear on. The default is rocky terrains-->
           <allowedTerrains>
             <li>Vacstone_Rough</li>
	       	</allowedTerrains>
           <!-- The terrains this must be near to, but not necessarily on -->
           <neededNearbyTerrains>
             <li>Vacstone_Rough</li>
           </neededNearbyTerrains>
           <!-- how far away it can be from needed nearby terrains-->
           <neededNearbyTerrainRadius>3</neededNearbyTerrainRadius>
           <!-- If true, growth rate and initial size depends on distance from needed terrains -->
           <neededNearbyTerrainSizeEffect>false</neededNearbyTerrainSizeEffect>
           <!-- The maximum number of images that will be printed per square -->
           <maxMeshCount>1</maxMeshCount>
           <!-- The size range -->
           <visualSizeRange>
             <min>1.7</min>
             <max>1.8</max>
           </visualSizeRange>
           <visualClustering>1.0</visualClustering>
           <!-- between 0 and 1. 0 = uniform distribution, 1 = normal distribution -->
           <visualSpread>0.2</visualSpread>
           <!-- 1 = everything appears within cell and can spawn at edge when visualClustering == 0 -->
           <visualSizeVariation>0.2</visualSizeVariation>
           <!-- Other resources it might drop -->
           <randomlyDropResources>
             <li>
               <ResourceDefName>RoughGem</ResourceDefName>
               <DropProbability>0.03</DropProbability>
               <MinMiningSkill>6</MinMiningSkill>
             </li>
             <li>
               <ResourceDefName>CrushedStone</ResourceDefName>
               <DropProbability>1</DropProbability>
               <CountPerDrop>5</CountPerDrop>
               <WasteProduct>true</WasteProduct>
             </li>
             <li>
               <ResourceDefName>Steel</ResourceDefName>
               <DropProbability>0.05</DropProbability>
               <CountPerDrop>10</CountPerDrop>
             </li>
           </randomlyDropResources>
           <!-- Things this mineral replaces when a map is initialized -->
           <ThingsToReplace>
             <li>Vacstone</li>
           </ThingsToReplace>
           <!-- Tags which determine how some options behave  -->
           <tags>
             <li>rock</li>
             <li>wall</li>
             <li>hewn</li>
           </tags>
           <!-- How easy it is to mine -->
           <mineSpeedFactor>0.7</mineSpeedFactor>
           <!-- Roof requirements -->
           <mustBeUnderRoof>false</mustBeUnderRoof>
           <mustBeUnderThickRoof>false</mustBeUnderThickRoof>
           <mustBeUnroofed>false</mustBeUnroofed>
           <mustBeNotUnderThickRoof>false</mustBeNotUnderThickRoof>
           <!-- Order in which minerals are spawned during map generation (lower numbers first) -->
           <newMapSpawnOrder>30</newMapSpawnOrder>
         </ThingDef>
 

         <ThingDef Name="SmoothedHewnVacstone" ParentName="HewnRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
           <defName>SmoothedHewnVacstone</defName>
           <label>Smooth Vacstone</label>
           <description>A smooth wall of vacstone.</description>
           <graphicData>
	       		<texPath>Things/Rock/SmoothedRockWall</texPath>
             <color>(115,106,98)</color>
           </graphicData>
           <uiIconPath>Things/Rock/SmoothedRockWall/SmoothedRockWallA</uiIconPath>
           <statBases>
             <MaxHitPoints>1700</MaxHitPoints>
             <Flammability>0</Flammability>
             <Beauty>1</Beauty>
           </statBases>
           <building>
             <mineableThing>ChunkVacstone</mineableThing>
             <mineableDropChance>0.4</mineableDropChance>
           </building>
           <!-- Other resources it might drop -->
           <randomlyDropResources>
             <li>
               <ResourceDefName>RoughGem</ResourceDefName>
               <DropProbability>0.03</DropProbability>
               <MinMiningSkill>6</MinMiningSkill>
             </li>
             <li>
               <ResourceDefName>CrushedStone</ResourceDefName>
               <DropProbability>1</DropProbability>
               <CountPerDrop>5</CountPerDrop>
               <WasteProduct>true</WasteProduct>
             </li>
             <li>
               <ResourceDefName>Steel</ResourceDefName>
               <DropProbability>0.05</DropProbability>
               <CountPerDrop>10</CountPerDrop>
             </li>
           </randomlyDropResources>
           <!-- How easy it is to mine -->
           <mineSpeedFactor>0.8</mineSpeedFactor>
         </ThingDef>
         
         
         <ThingDef Name="BoulderVacstone" ParentName="BoulderRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
           <defName>BoulderVacstone</defName>
           <label>Vacstone boulder</label>
           <description>Vacstone boulder. These can be climbed over with some difficulty and provide good cover.</description>
           <graphicData>
             <texPath>Things/Rock/PassableBasalt</texPath>
             <color>(115,106,98)</color>
           </graphicData>
           <uiIconPath>Things/Rock/PassableBasalt/PassableBasaltA</uiIconPath>
           <fillPercent>0.4</fillPercent>
           <statBases>
             <MaxHitPoints>1000</MaxHitPoints>
             <Flammability>0</Flammability>
             <Beauty>-1</Beauty>
           </statBases>
           <pathCost>100</pathCost>
           <building>
             <mineableThing>ChunkVacstone</mineableThing>
             <mineableDropChance>.6</mineableDropChance>
           </building>
           <!--How far away it can spawn from an existing location-->
           <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
           <spawnRadius>2</spawnRadius>
           <!-- The probability that this mineral type will be spawned at all on a given map -->
           <perMapProbability>1.0</perMapProbability>
           <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
           <minClusterProbability>0.1</minClusterProbability>
           <maxClusterProbability>0.4</maxClusterProbability>
           <!-- How  many squares each cluster will be -->
           <minClusterSize>1</minClusterSize>
           <maxClusterSize>1</maxClusterSize>
           <!-- The range of starting sizes of individuals in clusters -->
           <initialSizeMin>0.5</initialSizeMin>
           <initialSizeMax>1.0</initialSizeMax>
           <!-- How much initial sizes of individuals randomly vary -->
           <initialSizeVariation>.2</initialSizeVariation>
           <!-- The terrains this can appear on. The default is rocky terrains-->
	       	<allowedTerrains>
             <li>Vacstone_Rough</li>
	       	</allowedTerrains>
           <!-- The terrains this must be near to, but not necessarily on -->
           <neededNearbyTerrains>
	       		<li>HewnVacstone</li>
             <li>SolidVacstone</li>
           </neededNearbyTerrains>
           <!-- how far away it can be from needed nearby terrains-->
           <neededNearbyTerrainRadius>2</neededNearbyTerrainRadius>
           <!-- If true, growth rate and initial size depends on distance from needed terrains -->
           <neededNearbyTerrainSizeEffect>true</neededNearbyTerrainSizeEffect>
           <!-- Controls how extra clusters are added near assocaited ore-->
           <associatedOres>
           </associatedOres>
           <nearAssociatedOreBonus>5</nearAssociatedOreBonus>
           <!-- Roof requirements -->
           <mustBeUnderRoof>false</mustBeUnderRoof>
           <mustBeUnderThickRoof>false</mustBeUnderThickRoof>
           <mustBeUnroofed>false</mustBeUnroofed>
           <!-- The maximum number of images that will be printed per square -->
           <maxMeshCount>1</maxMeshCount>
           <!-- The size range -->
           <visualSizeRange>
             <min>1.0</min>
             <max>1.3</max>
           </visualSizeRange>
           <visualClustering>0.6</visualClustering>
           <!-- between 0 and 1. 0 = uniform distribution, 1 = normal distribution -->
           <visualSpread>1.0</visualSpread>
           <!-- 1 = everything appears within cell and can spawn at edge when visualClustering == 0 -->
           <visualSizeVariation>0.1</visualSizeVariation>
           <!-- Other resources it might drop -->
           <randomlyDropResources>
             <li>
               <ResourceDefName>RoughGem</ResourceDefName>
               <DropProbability>0.02</DropProbability>
               <MinMiningSkill>6</MinMiningSkill>
             </li>
             <li>
               <ResourceDefName>CrushedStone</ResourceDefName>
               <DropProbability>1</DropProbability>
               <CountPerDrop>5</CountPerDrop>
               <WasteProduct>true</WasteProduct>
             </li>
             <li>
               <ResourceDefName>MAU_SharpStoneShard</ResourceDefName>
               <DropProbability>0.1</DropProbability>
               <CountPerDrop>5</CountPerDrop>
             </li>
             <li>
               <ResourceDefName>Steel</ResourceDefName>
               <DropProbability>0.03</DropProbability>
               <CountPerDrop>10</CountPerDrop>
             </li>
           </randomlyDropResources>
           <!-- Things this mineral replaces when a map is initialized -->
           <ThingsToReplace>
             <li>ChunkVacstone</li>
           </ThingsToReplace>
           <!-- Tags which determine how some options behave  -->
           <tags>
             <li>rock</li>
             <li>boulder</li>
             <li>chunk_replacer</li>
           </tags>
           <!-- How easy it is to mine -->
           <mineSpeedFactor>0.8</mineSpeedFactor>
         </ThingDef>


         <ThingDef Name="PassableVacstone" ParentName="SmallRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
           <defName>PassableVacstone</defName>
           <label>Vacstone rocks</label>
           <description>Vacstone rocks that are easily walked over and provide little cover.</description>
           <graphicData>
             <texPath>Things/Rock/PassableBasalt</texPath>
             <color>(115,106,98)</color>
             <damageData>
               <enabled>false</enabled>
             </damageData>
           </graphicData>
           <uiIconPath>Things/Rock/PassableBasalt/PassableBasaltA</uiIconPath>
           <fillPercent>0.3</fillPercent>
           <statBases>
             <MaxHitPoints>900</MaxHitPoints>
             <Flammability>0</Flammability>
             <Beauty>-1</Beauty>
           </statBases>
           <pathCost>40</pathCost>
           <building>
             <mineableThing>ChunkVacstone</mineableThing>
             <mineableDropChance>0.3</mineableDropChance>
           </building>
           <!--How far away it can spawn from an existing location-->
           <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
           <spawnRadius>1.5</spawnRadius>
           <!-- The probability that this mineral type will be spawned at all on a given map -->
           <perMapProbability>1</perMapProbability>
           <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
           <minClusterProbability>0.1</minClusterProbability>
           <maxClusterProbability>0.3</maxClusterProbability>
           <!-- How  many squares each cluster will be -->
           <minClusterSize>1</minClusterSize>
           <maxClusterSize>1</maxClusterSize>
           <!-- The range of starting sizes of individuals in clusters -->
           <initialSizeMin>0.5</initialSizeMin>
           <initialSizeMax>1.0</initialSizeMax>
           <!-- How much initial sizes of individuals randomly vary -->
           <initialSizeVariation>.2</initialSizeVariation>
           <!-- The terrains this must be near to, but not necessarily on -->
           <neededNearbyTerrains>
	       		<li>Vacstone_Rough</li>
             <li>SolidVacstone</li>
             <li>BoulderVacstone</li>
             <li>PassableVacstone</li>
           </neededNearbyTerrains>
           <!-- The terrains this can appear on. The default is rocky terrains-->
	       	<allowedTerrains>
             <li>Vacstone_Rough</li>
	       	</allowedTerrains>
           <!-- how far away it can be from needed nearby terrains-->
           <neededNearbyTerrainRadius>2</neededNearbyTerrainRadius>
           <!-- If true, growth rate and initial size depends on distance from needed terrains -->
           <neededNearbyTerrainSizeEffect>true</neededNearbyTerrainSizeEffect>
           <!-- Controls how extra clusters are added near assocaited ore-->
           <associatedOres>
             <li>BoulderVacstone</li>
             <li>SolidVacstone</li>
           </associatedOres>
           <nearAssociatedOreBonus>3</nearAssociatedOreBonus>
           <!-- Roof requirements -->
           <mustBeUnderRoof>false</mustBeUnderRoof>
           <mustBeUnderThickRoof>false</mustBeUnderThickRoof>
           <mustBeUnroofed>false</mustBeUnroofed>
           <!-- The maximum number of images that will be printed per square -->
           <maxMeshCount>5</maxMeshCount>
           <!-- The size range -->
           <visualSizeRange>
             <min>0.3</min>
             <max>0.95</max>
           </visualSizeRange>
           <visualClustering>0.2</visualClustering>
           <!-- between 0 and 1. 0 = uniform distribution, 1 = normal distribution -->
           <visualSpread>1.2</visualSpread>
           <!-- 1 = everything appears within cell and can spawn at edge when visualClustering == 0 -->
           <visualSizeVariation>0.3</visualSizeVariation>
           <!-- Other resources it might drop -->
           <randomlyDropResources>
             <li>
               <ResourceDefName>RoughGem</ResourceDefName>
               <DropProbability>0.02</DropProbability>
               <MinMiningSkill>6</MinMiningSkill>
             </li>
             <li>
               <ResourceDefName>CrushedStone</ResourceDefName>
               <DropProbability>1</DropProbability>
               <CountPerDrop>5</CountPerDrop>
               <WasteProduct>true</WasteProduct>
             </li>
             <li>
               <ResourceDefName>Steel</ResourceDefName>
               <DropProbability>0.02</DropProbability>
               <CountPerDrop>10</CountPerDrop>
             </li>
           </randomlyDropResources>
           <!-- How easy it is to mine -->
           <mineSpeedFactor>1.2</mineSpeedFactor>
         </ThingDef>

         <ThingDef ParentName="WeatheredOre" Class="MineralsFramework.ThingDef_StaticMineral">
           <defName>WeatheredOreObsidian</defName>
           <label>Weathered Obsidian Deposits</label>
           <description>Weathered chunks of sharp volcanic glass.</description>
           <graphicData>
             <shaderType>CutoutComplex</shaderType>
             <texPath>Things/Ore/WeatheredOre</texPath>
             <graphicClass>Graphic_Random</graphicClass>
             <drawSize>(1.5,1.5)</drawSize>
             <color>(40,40,40)</color>
             <colorTwo>(5,5,5)</colorTwo>
           </graphicData>
           <!-- If the primary color is based on the stone below it -->
           <coloredByTerrain>false</coloredByTerrain>
           <randomlyDropResources>
             <li>
               <ResourceDefName>Obsidian</ResourceDefName>
               <DropProbability>5</DropProbability>
               <CountPerDrop>10</CountPerDrop>
             </li>
             <li>
               <ResourceDefName>RoughGem</ResourceDefName>
               <DropProbability>0.3</DropProbability>
             </li>
           </randomlyDropResources>
           <ThingsToReplace>
             <li>MineableObsidian</li>
           </ThingsToReplace>
           <!-- How easy it is to mine -->
           <mineSpeedFactor>0.5</mineSpeedFactor>
         </ThingDef>


         <ThingDef ParentName="SolidOre" Class="MineralsRock.ThingDef_SolidRock">
           <defName>SolidOreObsidian</defName>
           <label>Solid Obsidian Deposits</label>
           <description>Solid rock containing streaks of volcanic glass.</description>
           <graphicData>
             <shaderType>CutoutComplex</shaderType>
             <texPath>Things/Ore/WeatheredOre</texPath>
             <graphicClass>Graphic_Random</graphicClass>
             <drawSize>(1.5,1.5)</drawSize>
             <color>(40,40,40)</color>
             <colorTwo>(5,5,5)</colorTwo>
           </graphicData>
           <!-- If the primary color is based on the stone below it -->
           <coloredByTerrain>false</coloredByTerrain>
           <randomlyDropResources>
             <li>
               <ResourceDefName>Obsidian</ResourceDefName>
               <DropProbability>4</DropProbability>
               <CountPerDrop>10</CountPerDrop>
             </li>
             <li>
               <ResourceDefName>RoughGem</ResourceDefName>
               <DropProbability>0.5</DropProbability>
             </li>
           </randomlyDropResources>
           <ThingsToReplace>
             <li>MineableObsidian</li>
             <li>HewnOreObsidian</li>
           </ThingsToReplace>
           <!-- How easy it is to mine -->
           <mineSpeedFactor>0.5</mineSpeedFactor>
         </ThingDef>

         
         <ThingDef ParentName="HewnOre" Class="MineralsFramework.ThingDef_StaticMineral">
           <defName>HewnOreObsidian</defName>
           <label>Hewn Obsidian Deposits</label>
           <description>Hewn rock containing streaks of volcanic glass.</description>
           <graphicData>
             <shaderType>CutoutComplex</shaderType>
	       		<linkType>CornerFiller</linkType>
	       		<linkFlags>
	       			<li>Wall</li>
               <li>Rock</li>
               <li>MapEdge</li>
	       		</linkFlags>
	       		<damageData>
	       			<cornerTL>Damage/Corner</cornerTL>
	       			<cornerTR>Damage/Corner</cornerTR>
	       			<cornerBL>Damage/Corner</cornerBL>
	       			<cornerBR>Damage/Corner</cornerBR>
	       			<edgeTop>Damage/Edge</edgeTop>
	       			<edgeBot>Damage/Edge</edgeBot>
	       			<edgeLeft>Damage/Edge</edgeLeft>
	       			<edgeRight>Damage/Edge</edgeRight>
	       		</damageData>
             <texPath>Things/Ore/HewnOre</texPath>
             <graphicClass>Graphic_Random</graphicClass>
             <drawSize>(1.5,1.5)</drawSize>
             <color>(40,40,40)</color>
             <colorTwo>(5,5,5)</colorTwo>
           </graphicData>
           <!-- If the primary color is based on the stone below it -->
           <coloredByTerrain>false</coloredByTerrain>
           <randomlyDropResources>
             <li>
               <ResourceDefName>Obsidian</ResourceDefName>
               <DropProbability>3</DropProbability>
               <CountPerDrop>10</CountPerDrop>
             </li>
             <li>
               <ResourceDefName>RoughGem</ResourceDefName>
               <DropProbability>0.3</DropProbability>
             </li>
           </randomlyDropResources>
           <ThingsToReplace>
             <li>MineableObsidian</li>
           </ThingsToReplace>
           <!-- How easy it is to mine -->
           <mineSpeedFactor>0.6</mineSpeedFactor>
         </ThingDef>
         
         <ThingDef Name="ObsidianFlow" ParentName="BoulderRockBase" Class="MineralsFramework.ThingDef_StaticMineral">
           <defName>ObsidianFlow</defName>
           <label>Obsidian Flow</label>
           <description>A volcanic glass formed when lava cools quickly at the surface. Razor-shape edges make this very difficult to walk over.</description>
           <graphicData>
             <texPath>Things/Mineral/Obsidian</texPath>
             <graphicClass>Graphic_Random</graphicClass>
             <drawSize>(1,1)</drawSize>
           </graphicData>
           <uiIconPath>Things/Mineral/Obsidian/ObsidianA</uiIconPath>
           <hideAtSnowOrSandDepth>0.9</hideAtSnowOrSandDepth>
           <fillPercent>0.4</fillPercent>
           <statBases>
             <MaxHitPoints>500</MaxHitPoints>
             <Flammability>0</Flammability>
             <Beauty>5</Beauty>
           </statBases>
           <pathCost>150</pathCost>
           <passability>PassThroughOnly</passability>
           <building>
             <mineableThing>Obsidian</mineableThing>
             <mineableDropChance>0.5</mineableDropChance>
             <mineableYield>10</mineableYield>
           </building>
           <!--How far away it can spawn from an existing location-->
           <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
           <spawnRadius>1</spawnRadius>
           <!-- The probability that this mineral type will be spawned at all on a given map -->
           <perMapProbability>1</perMapProbability>
           <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
           <minClusterProbability>0.0002</minClusterProbability>
           <maxClusterProbability>0.002</maxClusterProbability>
           <!-- How  many squares each cluster will be -->
           <minClusterSize>20</minClusterSize>
           <maxClusterSize>100</maxClusterSize>
           <!-- The range of starting sizes of individuals in clusters -->
           <initialSizeMin>.6</initialSizeMin>
           <initialSizeMax>.9</initialSizeMax>
           <!-- How much initial sizes of individuals randomly vary -->
           <initialSizeVariation>.25</initialSizeVariation>
           <!-- The terrains this must be near to, but not necessarily on -->
           <neededNearbyTerrains>
             <li>VolcanicRock</li>
             <li>WeatheredBasalt</li>
             <li>SolidBasalt</li>
             <li>MR_BasaltBase</li>
             <li>MR_BasaltBase_Rough</li>
             <li>Obsidian</li>
             <li>MRE_DioriteBase_Rough</li>
             <li>MRE_AndesiteBase_Rough</li>
             <li>MRE_PeridotiteBase_Rough</li>
             <li>MRE_RhyoliteBase_Rough</li>
             <li>MRE_ScoriaBase_Rough</li>
           </neededNearbyTerrains>
           <!-- how far away it can be from needed nearby terrains-->
           <neededNearbyTerrainRadius>3</neededNearbyTerrainRadius>
           <!-- Controls how extra clusters are added near assocaited ore-->
           <associatedOres>
             <li>WeatheredOreObsidian</li>
             <li>SolidOreObsidian</li>
           </associatedOres>
           <nearAssociatedOreBonus>100</nearAssociatedOreBonus>
           <!-- If true, growth rate and initial size depends on distance from needed terrains -->
           <neededNearbyTerrainSizeEffect>false</neededNearbyTerrainSizeEffect>
           <!-- Roof requirements -->
           <mustBeUnderRoof>false</mustBeUnderRoof>
           <mustBeUnderThickRoof>false</mustBeUnderThickRoof>
           <mustBeUnroofed>true</mustBeUnroofed>
           <!-- The maximum number of images that will be printed per square -->
           <maxMeshCount>8</maxMeshCount>
           <!-- The size range -->
           <visualSizeRange>
             <min>0.3</min>
             <max>1.1</max>
           </visualSizeRange>
           <visualClustering>0.3</visualClustering>
           <!-- between 0 and 1. 0 = uniform distribution, 1 = normal distribution -->
           <visualSpread>2.0</visualSpread>
           <!-- 1 = everything appears within cell and can spawn at edge when visualClustering == 0 -->
           <visualSizeVariation>0.5</visualSizeVariation>
           <!-- Other resources it might drop -->
           <randomlyDropResources>
             <li>
               <ResourceDefName>RoughGem</ResourceDefName>
               <DropProbability>0.2</DropProbability>
               <MinMiningSkill>5</MinMiningSkill>
             </li>
             <li>
               <ResourceDefName>Obsidian</ResourceDefName>
               <DropProbability>2</DropProbability>
               <CountPerDrop>10</CountPerDrop>
             </li>
             <li>
               <ResourceDefName>CrushedStone</ResourceDefName>
               <DropProbability>1</DropProbability>
               <CountPerDrop>5</CountPerDrop>
               <WasteProduct>true</WasteProduct>
             </li>
           </randomlyDropResources>
           <!-- Minimum distance from the nearest settlement the inital spawn needs to be in order to be spawned at the maximum probablity -->
           <otherSettlementMiningRadius>6</otherSettlementMiningRadius>
           <!-- How easy it is to mine -->
           <mineSpeedFactor>0.3</mineSpeedFactor>
         </ThingDef>

      </value>
    </match>
  </Operation>
</Patch>
